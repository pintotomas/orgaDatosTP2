{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "\n",
    "import numpy\n",
    "import pandas\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.wrappers.scikit_learn import KerasRegressor\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.metrics import accuracy_score\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    " \n",
    "dataframe = pandas.read_csv(\"../data/tp1orga/test.csv\", delimiter=',', header=None)\n",
    "xtest = dataframe.values\n",
    " \n",
    "xtest=xtest[:,0:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([['0.0', nan],\n",
       "       ['53.0', '48.0'],\n",
       "       ['39.0', '39.0'],\n",
       "       ..., \n",
       "       ['219.0', '135.0'],\n",
       "       ['62.0', '48.0'],\n",
       "       ['367.0', '130.0']], dtype=object)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xtest[2:,0:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "dataframe = pandas.read_csv(\"../data/tp1orga/train.csv\", delimiter=',', header=None)\n",
    "dataset = dataframe.values\n",
    " \n",
    "X = dataset[2:,0:4]\n",
    "Y = dataset[2:,3:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([['220.0', '220.0', '1000.0', '220000.0'],\n",
       "       ['300.0', '103.0', '616.666666667', '185000.0'],\n",
       "       ['60.0', '60.0', '1466.66666667', '88000.0'],\n",
       "       ['37.0', '37.0', '1405.40540541', '52000.0']], dtype=object)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([['220000.0'],\n",
       "       ['185000.0'],\n",
       "       ['88000.0'],\n",
       "       ['52000.0']], dtype=object)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    " \n",
    "# define base model\n",
    "def baseline_model():\n",
    "\n",
    "    # create model\n",
    "    model = Sequential()\n",
    "    model.add(Dense(4, input_dim=4, init=\"normal\", activation='relu'))\n",
    "    model.add(Dense(1, init=\"normal\"))\n",
    "    # Compile model\n",
    "    model.compile(loss='mean_squared_error', optimizer='adam')\n",
    "    \n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "\n",
    "# fix random seed for reproducibility\n",
    "seed = 7\n",
    "numpy.random.seed(seed)\n",
    "# evaluate model with standardized dataset\n",
    "estimator = KerasRegressor(build_fn=baseline_model, nb_epoch=3, batch_size=5, verbose=2)\n",
    "\n",
    "    # round predictions\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/3\n",
      "15s - loss: 167273192018.3853\n",
      "Epoch 2/3\n",
      "14s - loss: 167268986091.6825\n",
      "Epoch 3/3\n",
      "17s - loss: 167264980901.4346\n",
      "Epoch 1/3\n",
      "16s - loss: 13691186077.2716\n",
      "Epoch 2/3\n",
      "15s - loss: 17509025.8404\n",
      "Epoch 3/3\n",
      "14s - loss: 6778715.9556\n",
      "Results: 111352796925.03 (111352382843.01) MSE\n",
      "Epoch 1/3\n",
      "29s - loss: 5963266883.1268\n",
      "Epoch 2/3\n",
      "29s - loss: 1975931.1442\n",
      "Epoch 3/3\n",
      "30s - loss: 1191653.3106\n",
      "[ 219970.46875    184974.3125      87966.2421875 ...,  154932.234375\n",
      "  218926.21875    107946.1953125]\n"
     ]
    }
   ],
   "source": [
    "\n",
    " \n",
    "kfold = KFold(n_splits=2, random_state=seed)\n",
    "results = cross_val_score(estimator, X, Y, cv=kfold)\n",
    "\n",
    "print(\"Results: %.2f (%.2f) MSE\" % (results.mean(), results.std()))\n",
    "estimator.fit(X, Y)\n",
    "prediction = estimator.predict(X)\n",
    " \n",
    "# round predictionsrounded =\n",
    "print(prediction) \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
